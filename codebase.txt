================================================================
Directory Structure
================================================================
src/
  context/
    index.ts
  contract/
    index.ts
  endpoint/
    index.ts
    utils.ts
  example/
    example-contract.ts
    example-endpoint.ts
  router/
    index.ts
  server/
    http-request.ts
    http-response.ts
    mime.ts
    ws.ts
  app.ts
  errors.ts
  mesh.ts
  utils.ts

================================================================
Files
================================================================

================
File: src/context/index.ts
================
import z, { ZodLiteral, ZodObject, ZodTypeAny } from "zod";
import { InferSchema, SchemaContract } from "../contract/index";
import { HttpRequest, HttpResponse } from "../mesh";
import { ERROR_STATUS_CODE, ErrorCode, ErrorStatus, ErrorStatusCode } from "../errors";

// Map status code to error codes
type StatusToErrorCodes = {
  [S in ErrorStatus]: {
    [K in keyof ErrorStatusCode]: ErrorStatusCode[K] extends S ? K : never
  }[keyof ErrorStatusCode]
};

// Detect error response keys in contract
type ErrorResponseKeys<C extends SchemaContract<any, any, any, any, any>> = {
  [K in keyof C["responses"] & number]: C["responses"][K] extends z.ZodObject<infer Shape, any, any>
    ? Shape extends { code: ZodLiteral<infer V> }
      ? V extends ErrorCode
        ? K
        : never
      : never
    : never;
}[keyof C["responses"] & number];

// Success responses are everything else
type SuccessResponseKeys<C extends SchemaContract<any, any, any, any, any>> =
  Exclude<keyof C["responses"] & number, ErrorResponseKeys<C>>;

// Inferred contract shape for metadata, tests, etc.
export type InferContract<T extends SchemaContract<any, any, any, any, any>> = NonNever<{
  method: T["method"];
  path: T["path"];
  description?: T["description"];
  body: InferSchema<T["body"]>;
  query: InferSchema<T["query"]>;
  params: InferSchema<T["params"]>;
  responses: {
    [K in keyof T["responses"]]: InferSchema<T["responses"][K]>;
  };
}>;

// Union of all valid response types from the contract
export type OneOfResponses<C extends SchemaContract<any, any, any, any, any>> =
  C["responses"][keyof C["responses"]] extends z.ZodType<any, any, any>
    ? InferSchema<C["responses"][keyof C["responses"]]>
    : never;

// Final typed response set
export type Responses<O, E extends { code: ErrorCode[] }> = {
  [K in keyof O]: ZodObject<O[K]>;
} & {
  [S in ErrorStatus as S extends typeof ERROR_STATUS_CODE[E["code"][number]] ? S : never]: ZodObject<{
    code: ZodLiteral<Extract<
      E["code"][number],
      {
        [K in keyof typeof ERROR_STATUS_CODE as typeof ERROR_STATUS_CODE[K] extends S ? K : never]: K
      }[keyof typeof ERROR_STATUS_CODE]
    >>
  }>;
};

// Per-status inferred response types
export type InferResponses<T extends SchemaContract<any, any, any, any, any>> = {
  [K in keyof T["responses"]]: InferSchema<T["responses"][K]>;
};

// Filtered request context type with only necessary request/response properties
export type Context<C extends SchemaContract<any, any, any, any, any>> =
  Pick<HttpRequest<
    InferSchema<C["body"]>,
    InferSchema<C["query"]>,
    InferSchema<C["params"]>
  >, 'body' | 'files' | 'params' | 'query' | 'headers' | 'method' | 'url'> &
  Pick<HttpResponse<OneOfResponses<C>>, 'header' | 'sendText' | 'sendFile' | 'status' | 'end'>;

export function resolveResponse<C extends SchemaContract<any, any, any, any, any>>(
  contract: C,
  res: HttpResponse<OneOfResponses<C>>,
  data: unknown
): void {
  for (const [statusCode, schema] of Object.entries(contract.responses)) {
    const parsed = schema.safeParse(data);
    if (parsed.success) {
      res.status(Number(statusCode)).sendJson(data);
      return;
    }
  }
  throw new Error(`Unhandled payload: ${JSON.stringify(data)}`);
}

export type ValidErrorCode<C extends SchemaContract<any, any, any, any, any>> =
  C["responses"][keyof C["responses"]] extends ZodObject<infer Shape>
    ? Shape extends { code: ZodLiteral<infer L> }
      ? L extends ErrorCode
        ? L
        : never
      : never
    : never;

================
File: src/contract/index.ts
================
import { z, ZodTypeAny, ZodObject, ZodLiteral } from "zod";
import {
  ERROR_STATUS_CODE,
  ErrorCode,
  ErrorStatus,
  ErrorStatusCode,
  isErrorCode,
  isSuccessCode,
  SuccessStatus,
  validateErrorSchema,
} from "../errors";

export const methods = ["any", "del", "get", "options", "post", "put"] as const;

export type Method = (typeof methods)[number];

export interface InputSchemas {
  body?: ZodShape;
  query?: ZodShape;
  params?: ZodShape;
}

export type SuccessResponse = Partial<
  Record<SuccessStatus, Record<string, ZodTypeAny>>
>;

export type ErrorResponse = {
  code: ErrorCode[];
};

// Final typed response set
export type Responses<O, E extends ErrorResponse> =
  // Keep success responses as ZodObject directly
  {
    [K in keyof O]: ZodObject<O[K]>;
  } & {
    // Map each error status (like 400, 500) to a literal ZodObject with multiple error codes
    [S in ErrorStatus as S extends (typeof ERROR_STATUS_CODE)[E["code"][number]]
      ? S
      : never]: ZodObject<{
      code: z.ZodLiteral<
        Extract<
          E["code"][number],
          ErrorCode &
            {
              [K in ErrorCode]: (typeof ERROR_STATUS_CODE)[K] extends S
                ? K
                : never;
            }[ErrorCode]
        >
      >;
    }>;
  };

export type ZodShape = Record<string, ZodTypeAny>;

/** Core contract for one API operation (purely declarative) */
export interface Contract<
  M extends Method = Method,
  P extends string = string,
  I extends InputSchemas = {},
  O extends SuccessResponse = {},
  E extends ErrorResponse = { code: [] }
> {
  method: M;
  path: P;
  description?: string;
  input?: I;
  output: O;
  errors?: E;
}

type ExtractSchema<I extends ZodShape | undefined> = I extends ZodShape
  ? ZodObject<I>
  : undefined;

export interface SchemaContract<
  M extends Method,
  P extends string,
  I extends InputSchemas,
  O extends SuccessResponse,
  E extends ErrorResponse
> {
  method: M;
  path: P;
  description?: string;
  body?: ExtractSchema<I["body"]>;
  query?: ExtractSchema<I["query"]>;
  params?: ExtractSchema<I["params"]>;
  responses: Responses<O, E>;
}

function createZodObject<T extends ZodShape | undefined>(
  input?: T
): T extends ZodShape ? ZodObject<T> : undefined {
  return (input ? z.object(input) : undefined) as T extends ZodShape
    ? ZodObject<T>
    : undefined;
}

export function createContract<
  M extends Method,
  P extends string,
  I extends InputSchemas,
  O extends SuccessResponse,
  E extends ErrorResponse
>(contract: Contract<M, P, I, O, E>): SchemaContract<M, P, I, O, E> {
  const input = {
    body: createZodObject(contract.input?.body),
    query: createZodObject(contract.input?.query),
    params: createZodObject(contract.input?.params),
  };

  const responses = {} as Responses<O, E>;

  if (contract.output) {
    for (const value in contract.output) {
      if (isSuccessCode(value)) {
        const status = value as SuccessStatus;
        const schema = createZodObject(contract.output[status]);
        if (schema) responses[status] = schema as any;
      }
    }
  }

  // Add single error response
  if (contract.errors) {
    const codes = (
      typeof contract.errors.code === "string"
        ? [contract.errors.code]
        : contract.errors.code
    ) as ErrorCode[];

    for (const code of codes) {
      const status = ERROR_STATUS_CODE[code];
      const schema = z.object({ code: z.literal(code) });
      validateErrorSchema(code, schema);
      responses[status as keyof typeof responses] = schema as any;
    }
  }

  return {
    method: contract.method,
    path: contract.path,
    description: contract.description,
    body: input.body,
    query: input.query,
    params: input.params,
    responses,
  } as SchemaContract<M, P, I, O, E>;
}

export type InferSchema<T> = T extends z.ZodType<any, any, any>
  ? z.infer<T>
  : never;

export type InferResponses<T extends SchemaContract<any, any, any, any, any>> =
  {
    [K in keyof T["responses"]]: InferSchema<T["responses"][K]>;
  };

type IsOptionalOrNever<T> = [T] extends [never]
  ? true
  : [undefined] extends [T]
  ? true
  : false;

type NonOptionalKeys<T> = {
  [K in keyof T as IsOptionalOrNever<T[K]> extends true ? never : K]: T[K];
};

export type InferContract<T extends SchemaContract<any, any, any, any, any>> =
  NonOptionalKeys<{
    method: T["method"];
    path: T["path"];
    description: T["description"];
    body: InferSchema<T["body"]>;
    query: InferSchema<T["query"]>;
    params: InferSchema<T["params"]>;
    responses: {
      [K in keyof T["responses"]]: T["responses"][K] extends ZodTypeAny
        ? z.infer<T["responses"][K]>
        : never;
    };
  }>;

================
File: src/endpoint/index.ts
================
import { Context, OneOfResponses } from "../context/index";
import { SchemaContract } from "../contract/index";

export abstract class Endpoint<
  S extends SchemaContract<any, any, any, any, any>
> {
  /**
   * The contract for this endpoint.
   * This is used to validate the request and response.
   */
  public abstract handler<C extends Context<S>>(ctx: C): Promise<OneOfResponses<S>>;
}

================
File: src/endpoint/utils.ts
================
import { OneOfResponses, SuccessResponseKeys, Context } from "../context/index";
import { InferSchema, SchemaContract } from "../contract/index";
import { HttpResponse } from "../mesh";

export function createSendError<
  C extends SchemaContract<any, any, any, any, any>
>(contract: C, res: HttpResponse<OneOfResponses<C>>): Context<C>["sendError"] {
  return ((code: any) => {
    for (const [statusCode, schema] of Object.entries(contract.responses)) {
      const parsed = schema.safeParse({ code });
      if (parsed.success) {
        res.status(Number(statusCode)).sendJson({ code } as any);
        return;
      }
    }
    throw new Error(`Unhandled error code: ${code}`);
  }) as Context<C>["sendError"];
}

export function json<
  C extends SchemaContract<any, any, any, any, any>
>(contract: C, res: HttpResponse<OneOfResponses<C>>): Context<C>["sendJson"] {
  return (<K extends SuccessResponseKeys<C>>(
    data: InferSchema<C["responses"][K]>
  ) => {
    for (const [statusCode, schema] of Object.entries(contract.responses)) {
      const parsed = schema.safeParse(data);
      if (parsed.success) {
        res.status(Number(statusCode)).sendJson(data);
        return;
      }
    }
    throw new Error(`Unhandled success payload: ${JSON.stringify(data)}`);
  }) as Context<C>["sendJson"];
}

================
File: src/example/example-contract.ts
================
import { createContract, InferContract, InferSchema } from "../contract/index";
import { z } from "zod";

// ✅ Valid GET contract with params, output and error schema
export const getUserContract = createContract({
  method: "get",
  path: "/users/:id",
  input: { params: { id: z.string() } },
  output: { 200: { id: z.string(), name: z.string() } },
  errors: { code: ["ERR_INVALID_OFFER_ID", "ERR_INVALID_SESSION_ID" , "ERR_FROM_PDF_API"] },
});

// ❌ Invalid HTTP method
createContract({
  // @ts-expect-error - 'fetch' is not a valid Method
  method: "fetch",
  path: "/bad",
  output: { 200: {} },
});

// ❌ Invalid success code
createContract({
  method: "get",
  path: "/bad",
  // @ts-expect-error - 299 is not a valid SuccessCode
  output: { 299: {} },
});

// ❌ Invalid error code
createContract({
  method: "get",
  path: "/bad",
  output: { 200: {} },
  errors: { code: ["ERR_INVALID_OFFER_ID"] },
});

type Params = InferSchema<typeof getUserContract.params>; // { id: string }
type Query = InferSchema<typeof getUserContract.query>; // { verbose: boolean }
type Body = typeof getUserContract.body; // undefined
type Res200 = InferSchema<(typeof getUserContract.responses)['200']>; // { name: string; id: string }
type Res404 = InferSchema<(typeof getUserContract.responses)['400']>; // { code: "NOT_FOUND" }

type FullContract = InferContract<typeof getUserContract>;

================
File: src/example/example-endpoint.ts
================
import { Context } from "../context/index";
import { Endpoint } from "../endpoint/index";
import { json } from "../endpoint/utils";
import { getUserContract } from "./example-contract";


type UserContract = typeof getUserContract;


export class GetUserEndpoint extends Endpoint<UserContract> {
  public async handler(ctx: Context<UserContract>) {
    // Return the JSON response - removed the unreachable code
    return {
      status: 200,
      data: {
      id: "123",
      name: "John Doe",
    }
  }
}

================
File: src/router/index.ts
================
import { Endpoint } from '../endpoint/index';

/**
 * Router holds a list of endpoint instances.
 */
export class Router<E extends Endpoint<any>> {
  /** Registered endpoints */
  public endpoints: E[];

  constructor(...endpoints: E[]) {
    this.endpoints = endpoints;
  }
}

/**
 * Factory to create a Router from Endpoint instances.
 */
export function createRouter<E extends Endpoint<any>>(
  ...endpoints: E[]
): Router<E> {
  return new Router(...endpoints);
}

================
File: src/server/http-request.ts
================
import { HttpRequest as UHttpRequest, HttpResponse as UHttpResponse, getParts } from 'uWebSockets.js';
import { parseQuery } from '../utils';
import { Method } from '../contract/index';

export interface UploadedFile {
  data: ArrayBuffer;
  filename: string;
  type: string;
}

export class HttpRequest<TBody = any, TQuery = any, TParams = any> {

  /**
   * Route pattern
   */
  route: string;

  private bodyData: Buffer | null = null;
  private contentType = '';
  private paramKeys: string[];
  private req: UHttpRequest;
  private res: UHttpResponse;

  constructor(req: UHttpRequest, res: UHttpResponse, pattern: string, paramKeys: string[]) {
    this.req = req;
    this.res = res;
    this.route = pattern;
    this.paramKeys = paramKeys;
  }

  /**
   * Request body content
   */
  async body(): Promise<TBody> {
    this.contentType = this.contentType ? this.contentType : this.req.getHeader('content-type');

    if (!this.contentType) return {} as TBody;

    const body = this.bodyData ? this.bodyData : await this.getBody(this.res);

    this.bodyData = body;

    if (!body?.length) return {} as TBody;

    if (this.contentType === 'application/json' || this.contentType === 'application/x-www-form-urlencoded') {
      const bodyStr = body.toString();
      
      if (!bodyStr) return {} as TBody;

      return (this.contentType === 'application/json'
        ? JSON.parse(bodyStr)
        : (parseQuery(bodyStr) as any)) as TBody;
    } else if (this.contentType.startsWith('multipart/form-data')) {
      const data: any = {};

      getParts(body, this.contentType)?.forEach(p => {
        if (!p.type && !p.filename) data[p.name] = Buffer.from(p.data).toString();
      });

      return data as TBody;
    } else return body as TBody;
  }

  /**
   * Request body content
   */
  async files(): Promise<{ [key: string]: UploadedFile | undefined }> {
    this.contentType = this.contentType ? this.contentType : this.req.getHeader('content-type');

    if (!this.contentType) return {};

    const body = this.bodyData ? this.bodyData : await this.getBody(this.res);

    this.bodyData = body;

    if (!body?.length) return {};

    if (this.contentType.startsWith('multipart/form-data')) {
      const data: any = {};

      getParts(body, this.contentType)?.forEach(p => {
        if (p.type && p.filename) {
          const
            name = p.name.slice(-2) === '[]' ? p.name.slice(0, -2) : p.name,
            value = { data: p.data, filename: p.filename, type: p.type };

          if (data[name] === undefined) data[name] = p.name.slice(-2) === '[]' ? [value] : value;
          else if (Array.isArray(data[name])) data[name].push(value);
          else data[name] = [data[name], value];
        }
      });

      return data;
    } else return {};
  }

  /**
   * Request headers
   */
  get headers(): { [key: string]: string } {
    const headers: any = {};

    this.req.forEach((key, value) => headers[key] = value);

    return headers;
  }

  /**
   * Lowercased HTTP method
   */
 get method(): Method {
    return this.req.getMethod() as Method;
  }

  /**
   * Request path params
   */
  get params(): TParams {
    const data: any = {};

    for (let i = 0; i < this.paramKeys.length; i++) data[this.paramKeys[i].slice(1)] = this.req.getParameter(i);

    return data as TParams;
  }

  /**
   * Request query params
   */
  get query(): TQuery {
    const query = this.req.getQuery();

    if (query) return parseQuery(query) as TQuery;

    return {} as TQuery;
  }

  /**
   * Request URL including initial /slash
   */
  get url() {
    return this.req.getUrl();
  }

  private async getBody(res: UHttpResponse): Promise<Buffer> {
    let buffer: Buffer;

    return new Promise(resolve => res.onData((ab, isLast) => {
      const chunk = Buffer.from(ab);

      if (isLast) {
        if (buffer) resolve(Buffer.concat([buffer, chunk]));
        else resolve(chunk);
      } else {
        if (buffer) buffer = Buffer.concat([buffer, chunk]);
        else buffer = Buffer.concat([chunk]);
      }
    }));
  }
}

================
File: src/server/http-response.ts
================
import { readFile } from "fs/promises";
import { getMime } from "./mime";
import { STATUS_CODES } from "http";
import { ERROR_STATUS_CODE, ErrorCode } from "../errors";

export class HttpResponse<T = any> {
  /**
   * Response body or raw text
   */
  public body?: T | string;

  hasHeaders = false;

  /**
   * Response headers
   */
  headers: { [key: string]: string } = {};

  /**
   * Response status
   */
  statusCode?: string;

  /**
   * Ends response
   *
   * @param text Text to response
   *
   * @example
   * ```
   * app.get('/users', (req, res) => res.end());
   * ```
   */
  end(text?: string) {
    this.body = text;
  }

  /**
   * Sets response headers
   *
   * @param key Header key
   * @param value Header value
   * @returns HttpResponse instance
   *
   * @example
   * ```
   * app.get('/users', (req, res) => {
   *  res.header('X-HEADER-ID', '123').json({ success: true });
   * });
   * ```
   */
  header(key: string, value: string) {
    this.headers[key] = value;

    this.hasHeaders = true;

    return this;
  }

  /**
   * Responses JSON
   *
   * @param json Object to serialize and response
   *
   * @example
   * ```
   * app.get('/users', (req, res) => res.json({ success: true }));
   * ```
   */
  sendJson(json: T) {
    this.sendText(JSON.stringify(json));
  }

  /**
   * Responses text
   *
   * @param text Text to response
   *
   * @example
   * ```
   * app.get('/users', (req, res) => res.send('success'));
   * ```
   */
  sendText(text: string) {
    this.body = text;
  }

  /**
   * Responses file
   *
   * @param path File path
   *
   * @example
   * ```
   * app.get('/users', (req, res) => res.sendFile('./uploads/profile.png'));
   * ```
   */
  async sendFile(path: string) {
    try {
      const file = await readFile(path);

      this.header("Content-Type", getMime(path)).sendText(file.toString());
    } catch (e) {
      this.status(404).sendText("Not found");
    }
  }

  /**
   * Responses error
   *
   * @param code Error status code
   *
   * @example
   * ```
   * app.get('/users', (req, res) => res.sendError('ERROR_INVALID_REQUEST'));
   * ```
   */
  sendError(code: ErrorCode) {
    const status = ERROR_STATUS_CODE[code];
    return this.status(status).sendJson({ code } as T);
  }

  /**
   * Response status
   *
   * @param status Status code
   * @returns HttpResponse instance
   *
   * @example
   * ```
   * app.post('/users', (req, res) => res.status(201).json({ success: true }));
   * ```
   */
  status(status: number) {
    this.statusCode = this.getStatusCode(status);

    return this;
  }

  private getStatusCode(status: number) {
    return `${status} ${STATUS_CODES[status]}`;
  }
}

================
File: src/server/mime.ts
================
const mimes: { [key: string]: string } = {
  '3gp': 'video/3gpp',
  a: 'application/octet-stream',
  ai: 'application/postscript',
  aif: 'audio/x-aiff',
  aiff: 'audio/x-aiff',
  asc: 'application/pgp-signature',
  asf: 'video/x-ms-asf',
  asm: 'text/x-asm',
  asx: 'video/x-ms-asf',
  atom: 'application/atom+xml',
  au: 'audio/basic',
  avi: 'video/x-msvideo',
  bat: 'application/x-msdownload',
  bin: 'application/octet-stream',
  bmp: 'image/bmp',
  bz2: 'application/x-bzip2',
  c: 'text/x-c',
  cab: 'application/vnd.ms-cab-compressed',
  cc: 'text/x-c',
  chm: 'application/vnd.ms-htmlhelp',
  class: 'application/octet-stream',
  com: 'application/x-msdownload',
  conf: 'text/plain',
  cpp: 'text/x-c',
  crt: 'application/x-x509-ca-cert',
  css: 'text/css',
  csv: 'text/csv',
  cxx: 'text/x-c',
  deb: 'application/x-debian-package',
  der: 'application/x-x509-ca-cert',
  diff: 'text/x-diff',
  djv: 'image/vnd.djvu',
  djvu: 'image/vnd.djvu',
  dll: 'application/x-msdownload',
  dmg: 'application/octet-stream',
  doc: 'application/msword',
  dot: 'application/msword',
  dtd: 'application/xml-dtd',
  dvi: 'application/x-dvi',
  ear: 'application/java-archive',
  eml: 'message/rfc822',
  eps: 'application/postscript',
  exe: 'application/x-msdownload',
  f: 'text/x-fortran',
  f77: 'text/x-fortran',
  f90: 'text/x-fortran',
  flv: 'video/x-flv',
  for: 'text/x-fortran',
  gem: 'application/octet-stream',
  gemspec: 'text/x-script.ruby',
  gif: 'image/gif',
  gz: 'application/x-gzip',
  h: 'text/x-c',
  hh: 'text/x-c',
  htm: 'text/html',
  html: 'text/html',
  ico: 'image/vnd.microsoft.icon',
  ics: 'text/calendar',
  ifb: 'text/calendar',
  iso: 'application/octet-stream',
  jar: 'application/java-archive',
  java: 'text/x-java-source',
  jnlp: 'application/x-java-jnlp-file',
  jpeg: 'image/jpeg',
  jpg: 'image/jpeg',
  js: 'application/javascript',
  json: 'application/json',
  log: 'text/plain',
  m3u: 'audio/x-mpegurl',
  m4v: 'video/mp4',
  man: 'text/troff',
  mathml: 'application/mathml+xml',
  mbox: 'application/mbox',
  mdoc: 'text/troff',
  me: 'text/troff',
  mid: 'audio/midi',
  midi: 'audio/midi',
  mime: 'message/rfc822',
  mjs: 'application/javascript',
  mml: 'application/mathml+xml',
  mng: 'video/x-mng',
  mov: 'video/quicktime',
  mp3: 'audio/mpeg',
  mp4: 'video/mp4',
  mp4v: 'video/mp4',
  mpeg: 'video/mpeg',
  mpg: 'video/mpeg',
  ms: 'text/troff',
  msi: 'application/x-msdownload',
  odp: 'application/vnd.oasis.opendocument.presentation',
  ods: 'application/vnd.oasis.opendocument.spreadsheet',
  odt: 'application/vnd.oasis.opendocument.text',
  ogg: 'application/ogg',
  p: 'text/x-pascal',
  pas: 'text/x-pascal',
  pbm: 'image/x-portable-bitmap',
  pdf: 'application/pdf',
  pem: 'application/x-x509-ca-cert',
  pgm: 'image/x-portable-graymap',
  pgp: 'application/pgp-encrypted',
  pkg: 'application/octet-stream',
  pl: 'text/x-script.perl',
  pm: 'text/x-script.perl-module',
  png: 'image/png',
  pnm: 'image/x-portable-anymap',
  ppm: 'image/x-portable-pixmap',
  pps: 'application/vnd.ms-powerpoint',
  ppt: 'application/vnd.ms-powerpoint',
  ps: 'application/postscript',
  psd: 'image/vnd.adobe.photoshop',
  py: 'text/x-script.python',
  qt: 'video/quicktime',
  ra: 'audio/x-pn-realaudio',
  rake: 'text/x-script.ruby',
  ram: 'audio/x-pn-realaudio',
  rar: 'application/x-rar-compressed',
  rb: 'text/x-script.ruby',
  rdf: 'application/rdf+xml',
  roff: 'text/troff',
  rpm: 'application/x-redhat-package-manager',
  rss: 'application/rss+xml',
  rtf: 'application/rtf',
  ru: 'text/x-script.ruby',
  s: 'text/x-asm',
  sgm: 'text/sgml',
  sgml: 'text/sgml',
  sh: 'application/x-sh',
  sig: 'application/pgp-signature',
  snd: 'audio/basic',
  so: 'application/octet-stream',
  svg: 'image/svg+xml',
  svgz: 'image/svg+xml',
  swf: 'application/x-shockwave-flash',
  t: 'text/troff',
  tar: 'application/x-tar',
  tbz: 'application/x-bzip-compressed-tar',
  tcl: 'application/x-tcl',
  tex: 'application/x-tex',
  texi: 'application/x-texinfo',
  texinfo: 'application/x-texinfo',
  text: 'text/plain',
  tif: 'image/tiff',
  tiff: 'image/tiff',
  torrent: 'application/x-bittorrent',
  tr: 'text/troff',
  txt: 'text/plain',
  vcf: 'text/x-vcard',
  vcs: 'text/x-vcalendar',
  vrml: 'model/vrml',
  war: 'application/java-archive',
  wav: 'audio/x-wav',
  wma: 'audio/x-ms-wma',
  wmv: 'video/x-ms-wmv',
  wmx: 'video/x-ms-wmx',
  wrl: 'model/vrml',
  wsdl: 'application/wsdl+xml',
  xbm: 'image/x-xbitmap',
  xhtml: 'application/xhtml+xml',
  xls: 'application/vnd.ms-excel',
  xml: 'application/xml',
  xpm: 'image/x-xpixmap',
  xsl: 'application/xml',
  xslt: 'application/xslt+xml',
  yaml: 'text/yaml',
  yml: 'text/yaml',
  zip: 'application/zip',
  default: 'text/html'
}

export const getMime = (path: string) => {
  const i = path.lastIndexOf('.');
  
  return mimes[path.slice(i + 1).toLowerCase()];
}

================
File: src/server/ws.ts
================
interface WebSocket {
  send(message: string): void;
}

export interface WebSocketBehavior {
  close?: (ws: WebSocket, code: number, message: ArrayBuffer) => void;
  message?: (ws: WebSocket, message: ArrayBuffer) => void;
  open?: (ws: WebSocket) => void;
}

================
File: src/errors.ts
================
import { ZodLiteral, ZodObject, ZodTypeAny } from "zod";

export const SUCCESS_CODES = [200, 201, 202, 203, 204, 205, 206] as const;

export const ERROR_STATUS_CODE = {
  ERR_INVALID_SESSION_ID: 400,
  ERR_INVALID_ID_TYPE_ID: 400,
  ERR_INVALID_ORIGIN: 400,
  ERR_INVALID_OFFER_ID: 400,
  ERR_SESSION_ID_NOT_FOUND: 404,
  ERR_REF_ID_NOT_FOUND: 404,
  ERR_FROM_LINECHECK_API: 500,
  ERR_FROM_PDF_API: 500,
} as const;

export type ErrorStatus = (typeof ERROR_STATUS_CODE)[ErrorCode];
export type ErrorCode = keyof typeof ERROR_STATUS_CODE;
export type SuccessStatus = (typeof SUCCESS_CODES)[number];

export type ErrorStatusCode = {
  [S in (typeof ERROR_STATUS_CODE)[keyof typeof ERROR_STATUS_CODE]]: {
    [K in keyof typeof ERROR_STATUS_CODE]: (typeof ERROR_STATUS_CODE)[K] extends S
      ? K
      : never;
  }[keyof typeof ERROR_STATUS_CODE];
};

export function isErrorCode(value: unknown): value is ErrorStatus {
  const code = Number(value);
  return Object.values(ERROR_STATUS_CODE).includes(code as ErrorStatus);
}

export function isSuccessCode(value: unknown): value is SuccessStatus {
  const code = Number(value);
  return SUCCESS_CODES.includes(code as SuccessStatus);
}

export function validateErrorSchema(code: string, schema: ZodTypeAny) {
  if (!Object.prototype.hasOwnProperty.call(ERROR_STATUS_CODE, code)) {
    throw new Error(
      `Invalid error code "${code}". Must be one of ERROR_STATUS_CODE keys.`
    );
  }

  if (!(schema instanceof ZodObject)) {
    throw new Error(`Error schema for "${code}" must be a z.object`);
  }

  const literal = schema.shape?.code;

  if (!(literal instanceof ZodLiteral) || literal.value !== code) {
    throw new Error(
      `Error response for "${code}" must be z.object({ code: z.literal("${code}") })`
    );
  }
}

================
File: src/mesh.ts
================
import { App } from './app';
import { HttpRequest, UploadedFile } from './server/http-request';
import { HttpResponse } from './server/http-response';

 
export { App, HttpRequest, HttpResponse, UploadedFile }

================
File: src/utils.ts
================
export const parseQuery = (query: string) => {
  const
    result: any = {},
    parts = query.split('&');

  parts.forEach(p => {
    const
      [k, v] = p.split('='),
      dkey = decodeURIComponent(k),
      key = dkey.slice(-2) === '[]' ? dkey.slice(0, -2) : dkey,
      val = decodeURIComponent(v);

    if (result[key] === undefined) result[key] = val;
    else if (Array.isArray(result[key])) result[key].push(val);
    else result[key] = [result[key], val];
  });

  return result;
}

================
File: src/app.ts
================
import { App as uWebSockets, TemplatedApp } from "uWebSockets.js";
import { HttpResponse } from "./server/http-response";
import { HttpRequest } from "./server/http-request";
import { WebSocketBehavior } from "./server/ws";
import { Context } from "./context/index";
import { SchemaContract } from "./contract/index";
import { Endpoint } from "./endpoint/index";

export class App {
  private app: TemplatedApp;
  private catchFunction?: (
    error: any,
    req: HttpRequest,
    res: HttpResponse
  ) => void | Promise<void>;
  private middlewares: {
    pattern?: string;
    middleware: (req: HttpRequest, res: HttpResponse) => void | Promise<void>;
  }[] = [];
  private notFoundFunction?: (
    req: HttpRequest,
    res: HttpResponse
  ) => void | Promise<void>;

  constructor() {
    this.app = uWebSockets();
  }

  catch(
    handler: (
      error: any,
      req: HttpRequest,
      res: HttpResponse
    ) => void | Promise<void>
  ) {
    this.catchFunction = handler;

    return this;
  }

  listen(port: number, cb?: () => void | Promise<void>) {
    // if (this.notFoundFunction)
    //   this.register("any", "/*", this.notFoundFunction);

    this.app.listen(port, cb ? cb : () => {});
  }

  notFound(
    handler: (req: HttpRequest, res: HttpResponse) => void | Promise<void>
  ) {
    this.notFoundFunction = handler;

    return this;
  }

  use(
    middleware: (req: HttpRequest, res: HttpResponse) => void | Promise<void>
  ): this;

  use(
    pattern: string,
    middleware: (req: HttpRequest, res: HttpResponse) => void | Promise<void>
  ): this;
  use(
    arg1:
      | string
      | ((req: HttpRequest, res: HttpResponse) => void | Promise<void>),
    arg2?: (req: HttpRequest, res: HttpResponse) => void | Promise<void>
  ) {
    this.middlewares.push(
      typeof arg1 === "string"
        ? {
            middleware: arg2 as (
              req: HttpRequest,
              res: HttpResponse
            ) => void | Promise<void>,
            pattern: arg1,
          }
        : { middleware: arg1 }
    );

    return this;
  }

  ws(pattern: string, behavior: WebSocketBehavior) {
    this.app.ws(pattern, {
      close: (ws, code, message) => {
        if (behavior.close) behavior.close(ws, code, message);
      },
      message: (ws, message) => {
        if (behavior.message) behavior.message(ws, message);
      },
      open: (ws) => {
        if (behavior.open) behavior.open(ws);
      },
    });

    return this;
  }

  // private register(
  //   method: "any" | "del" | "get" | "options" | "post" | "put",
  //   pattern: string,
  //   handler: (req: HttpRequest, res: HttpResponse) => void | Promise<void>
  // ) {
  //   const middlewares: any[] = [],
  //     paramKeys = this.parseParamKeys(pattern);

  //   for (let i = 0; i < this.middlewares.length; i++) {
  //     if (
  //       !this.middlewares[i].pattern ||
  //       pattern.startsWith(this.middlewares[i].pattern as string)
  //     )
  //       middlewares.push(this.middlewares[i]);
  //   }

  //   this.app[method](pattern, async (ures, ureq) => {
  //     const req = new HttpRequest(ureq, ures, pattern, paramKeys),
  //       res = new HttpResponse();

  //     let aborted = false;

  //     ures.onAborted(() => (aborted = true));

  //     try {
  //       for (let i = 0; i < middlewares.length; i++)
  //         await middlewares[i].middleware(req, res);

  //       await handler(req, res);
  //     } catch (e) {
  //       if (this.catchFunction) this.catchFunction(e, req, res);
  //     }

  //     if (!aborted) {
  //       if (res.hasHeaders || res.statusCode)
  //         ures.cork(() => {
  //           if (res.statusCode) ures.writeStatus(res.statusCode);

  //           if (res.hasHeaders) {
  //             for (const h in res.headers) ures.writeHeader(h, res.headers[h]);
  //           }

  //           ures.end(res.body);
  //         });
  //       else ures.end(res.body);
  //     }
  //   });
  // }

  private register<C extends SchemaContract<any, any, any, any, any>>(
    method: "any" | "del" | "get" | "options" | "post" | "put",
    pattern: string,
    endpoint: Endpoint<C>
  ) {
    const middlewares: any[] = [],
      paramKeys = this.parseParamKeys(pattern);

    for (let i = 0; i < this.middlewares.length; i++) {
      if (
        !this.middlewares[i].pattern ||
        pattern.startsWith(this.middlewares[i].pattern as string)
      )
        middlewares.push(this.middlewares[i]);
    }

    this.app[method](pattern, async (ures, ureq) => {
      const req = new HttpRequest(ureq, ures, pattern, paramKeys),
        res = new HttpResponse();

      let aborted = false;
      ures.onAborted(() => (aborted = true));

      try {
        for (let i = 0; i < middlewares.length; i++)
          await middlewares[i].middleware(req, res);

        const ctx: Context<C> = {
          body: req.body.bind(req),
          files: req.files.bind(req),
          params: req.params,
          query: req.query,
          headers: req.headers,
          method: req.method,
          url: req.url,
          header: res.header.bind(res),
          sendText: res.sendText.bind(res),
          sendJson: res.sendJson.bind(res),
          sendFile: res.sendFile.bind(res),
          sendError: res.sendError.bind(res),
          status: res.status.bind(res),
          end: res.end.bind(res),
        };

        await endpoint.handler(ctx);
      } catch (e) {
        if (this.catchFunction) this.catchFunction(e, req, res);
      }

      if (!aborted) {
        if (res.hasHeaders || res.statusCode)
          ures.cork(() => {
            if (res.statusCode) ures.writeStatus(res.statusCode);
            if (res.hasHeaders) {
              for (const h in res.headers) ures.writeHeader(h, res.headers[h]);
            }
            ures.end(res.body);
          });
        else ures.end(res.body);
      }
    });
  }

  private parseParamKeys(pattern: string) {
    const params = pattern.match(/:[\w]+/g);

    return params ? params : [];
  }
}




================================================================
End of Codebase
================================================================
